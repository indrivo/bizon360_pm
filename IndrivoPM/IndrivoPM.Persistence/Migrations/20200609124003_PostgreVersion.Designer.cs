// <auto-generated />
using System;
using Gear.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Gear.Persistence.Migrations
{
    [DbContext(typeof(GearContext))]
    [Migration("20200609124003_PostgreVersion")]
    partial class PostgreVersion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.ReferenceSequenceActivities", "'ReferenceSequenceActivities', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.ReferenceSequenceActivityLists", "'ReferenceSequenceActivityLists', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.ReferenceSequenceChangeRequests", "'ReferenceSequenceChangeRequests', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.ReferenceSequenceProjects", "'ReferenceSequenceProjects', '', '1', '1', '', '', 'Int32', 'False'");

            modelBuilder.Entity("Gear.Common.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("AuditData");

                    b.Property<DateTime>("AuditDate");

                    b.Property<Guid>("AuditUserId");

                    b.Property<string>("AuditUserName")
                        .IsRequired();

                    b.Property<string>("EntityPk")
                        .IsRequired();

                    b.Property<string>("EntityTypeName");

                    b.Property<string>("TableName")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Gear.Common.Entities.EntryChange", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("AuditLogId");

                    b.Property<string>("ColumnName");

                    b.Property<string>("NewValue");

                    b.Property<string>("OriginalValue");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.ToTable("EntryChanges");
                });

            modelBuilder.Entity("Gear.Domain.AppEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("PlatformName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.HasIndex("PlatformName");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Gear.Domain.AppEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("EmploymentType");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("JobPositionId");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Gear.Domain.AppEntities.Platform", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.HasKey("Name");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.BusinessUnit", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<Guid?>("BusinessUnitLeadId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(900);

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitLeadId");

                    b.ToTable("BusinessUnits");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<bool>("Active");

                    b.Property<Guid?>("BusinessUnitId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<Guid?>("DepartmentLeadId");

                    b.Property<string>("Description")
                        .HasMaxLength(900);

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name");

                    b.Property<int>("RowOrder");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("DepartmentLeadId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.DepartmentTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<Guid?>("DepartmentTeamLeadId");

                    b.Property<string>("Description")
                        .HasMaxLength(900);

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name");

                    b.Property<int>("RowOrder");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentTeamLeadId");

                    b.ToTable("DepartmentTeams");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.JobDepartmentTeam", b =>
                {
                    b.Property<Guid>("JobPositionId");

                    b.Property<Guid>("DepartmentTeamId");

                    b.HasKey("JobPositionId", "DepartmentTeamId");

                    b.HasIndex("DepartmentTeamId");

                    b.ToTable("JobDepartmentTeams");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.JobPosition", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Abbreviation");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int?>("HourlySalary");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("RowOrder");

                    b.HasKey("Id");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.Recruitment.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("CandidateStatus");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<decimal>("DesiredSalary")
                        .HasColumnType("MONEY");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("JobPositionId");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<Guid?>("RecruitmentStageId");

                    b.HasKey("Id");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("RecruitmentStageId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.Recruitment.RecruitmentPipeline", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("RecruitingPipelines");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.Recruitment.RecruitmentStage", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("PipelineId");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.ToTable("RecruitmentStages");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.UserDepartmentTeam", b =>
                {
                    b.Property<Guid>("DeparmentTeamId");

                    b.Property<Guid>("UserId");

                    b.HasKey("DeparmentTeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartmentTeams");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Activity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<Guid?>("ActivityListId");

                    b.Property<int>("ActivityPriority");

                    b.Property<int>("ActivityStatus");

                    b.Property<Guid>("ActivityTypeId");

                    b.Property<Guid?>("ChnageRequestId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DueDate");

                    b.Property<float?>("EstimatedHours");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"ReferenceSequenceActivities\"')");

                    b.Property<int>("Progress");

                    b.Property<Guid>("ProjectId");

                    b.Property<int?>("RowOrder");

                    b.Property<Guid?>("SprintId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ActivityListId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ChnageRequestId")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.HasIndex("SprintId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ActivityAssignee", b =>
                {
                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("UserId");

                    b.HasKey("ActivityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityAssignees");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ActivityList", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<int>("ActivityListStatus");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DueDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"ReferenceSequenceActivityLists\"')");

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid?>("SprintId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SprintId");

                    b.ToTable("ActivityLists");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ActivityType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Abbreviation");

                    b.Property<bool>("Active");

                    b.Property<int>("ColorBadge");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("RowOrder");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ChangeRequest", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Comment");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"ReferenceSequenceChangeRequests\"')");

                    b.Property<int>("Priority");

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ReviewBy");

                    b.Property<DateTime>("ReviewDate");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ChangeRequests");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.CheckItem", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("LoggedTimeId");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LoggedTimeId");

                    b.ToTable("CheckItems");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.LoggedTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("ActivityId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<DateTime>("DateOfWork");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name");

                    b.Property<float>("Time");

                    b.Property<Guid>("TrackerId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TrackerId");

                    b.HasIndex("UserId");

                    b.ToTable("LoggedTimes");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.MainComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("AuthorJobPosition");

                    b.Property<string>("AuthorName");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Message");

                    b.Property<Guid>("RecordId");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.ToTable("MainComments");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Project", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<decimal?>("Budget");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("Number")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"ReferenceSequenceProjects\"')");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<Guid?>("ProductTypeId");

                    b.Property<Guid>("ProjectGroupId");

                    b.Property<Guid>("ProjectInvoiceId");

                    b.Property<Guid?>("ProjectManagerId");

                    b.Property<Guid>("ProjectSettingsId");

                    b.Property<string>("ProjectUrl")
                        .HasMaxLength(100);

                    b.Property<Guid?>("ServiceTypeId");

                    b.Property<Guid?>("SolutionTypeId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<Guid?>("TechnologyTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProjectGroupId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SolutionTypeId");

                    b.HasIndex("TechnologyTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ProjectActivityType", b =>
                {
                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ActivityTypeId");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.HasKey("ProjectId", "ActivityTypeId");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("ProjectActivityTypes");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ProjectGroup", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("ProjectGroups");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ProjectMember", b =>
                {
                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("UserId");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Settings.ProjectInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BudgetMoney");

                    b.Property<decimal>("BudgetMoneyHours");

                    b.Property<int>("Currency");

                    b.Property<decimal>("HourRateMoney");

                    b.Property<int>("MaxLogHoursActivity");

                    b.Property<int>("MaxLogHoursDay");

                    b.Property<Guid>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectInvoices");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Settings.ProjectSettings", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<bool>("ActivityActivityTab");

                    b.Property<bool>("ActivityChangeActivityList");

                    b.Property<bool>("ActivityChangeActivityType");

                    b.Property<bool>("ActivityChangeEstimatedTime");

                    b.Property<bool>("ActivityChangeName");

                    b.Property<bool>("ActivityChangeProirity");

                    b.Property<bool>("ActivityChangeProject");

                    b.Property<bool>("ActivityChangeSprint");

                    b.Property<bool>("ActivityChangeStartDueDate");

                    b.Property<bool>("ActivityChangeStatus");

                    b.Property<bool>("ActivityChangeTeam");

                    b.Property<bool>("ActivityCommentsTab");

                    b.Property<bool>("ActivityDelete");

                    b.Property<bool>("ActivityHistoryTab");

                    b.Property<bool>("ActivityLinkedActivitiesTab");

                    b.Property<bool>("ActivityLoggedTimeTab");

                    b.Property<bool>("ActivityNotificationDailyDeadline");

                    b.Property<bool>("ActivityNotificationDailyOverdue");

                    b.Property<bool>("ActivityNotificationOnCreateUpdateCompleteDelete");

                    b.Property<bool>("ActivityNotificationWeeklyDeadline");

                    b.Property<bool>("ActivityTypesTab")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("DailyEmailsLoggedTimeActivityType");

                    b.Property<bool>("DailyEmailsLoggedTimeSprint");

                    b.Property<bool>("DailyMembersLoggedTime");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<bool>("MonthlyEmailsLoggedTimeActivityType");

                    b.Property<bool>("MonthlyEmailsLoggedTimeSprint");

                    b.Property<bool>("MonthlyMembersLoggedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("ProjectActivitiesTab");

                    b.Property<bool>("ProjectChangeRequestsTab");

                    b.Property<bool>("ProjectDashboardTab")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProjectId");

                    b.Property<bool>("ProjectInvoiceTab");

                    b.Property<bool>("ProjectLoggedTimeTab");

                    b.Property<bool>("ProjectNotificationDailyDeadline");

                    b.Property<bool>("ProjectNotificationDailyOverdue");

                    b.Property<bool>("ProjectNotificationOnUpdateCompleteArchive");

                    b.Property<bool>("ProjectNotificationWeeklyDeadline");

                    b.Property<bool>("ProjectProjectTab");

                    b.Property<bool>("ProjectReportsTab");

                    b.Property<bool>("ProjectWikiAndFilesTab");

                    b.Property<bool>("SprintNotificationDailyDeadline");

                    b.Property<bool>("SprintNotificationDailyOverdue");

                    b.Property<bool>("SprintNotificationOnCreateUpdateCompleteDelete");

                    b.Property<bool>("SprintNotificationWeeklyDeadline");

                    b.Property<bool>("WeeklyEmailsLoggedTimeActivityType");

                    b.Property<bool>("WeeklyEmailsLoggedTimeSprint");

                    b.Property<bool>("WeeklyMembersLoggedTime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectSettings");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Sprint", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("ProjectId");

                    b.Property<int>("SprintStatus");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.TrackerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("ActivityTypeId");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name");

                    b.Property<int?>("RowOrder");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("TrackerTypes");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Wiki.Headline", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WikiHeadlines");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Wiki.Section", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Content");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<Guid>("HeadlineId");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifyTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("HeadlineId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserActivityStatusFilter<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityStatus");

                    b.Property<Guid>("ReportId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityStatusFilters");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserDateFilter<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("FilterType");

                    b.Property<Guid>("ReportId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDateFilters");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserGuidFilter<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EntityId");

                    b.Property<int>("FilterType");

                    b.Property<Guid>("ReportId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGuidFilters");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserProjectStatusFilter<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectStatus");

                    b.Property<Guid>("ReportId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjectStatusFilters");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.Report<System.Guid>", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.ReportFilter<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("ReportId");

                    b.Property<int>("FilterType");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("UserId", "ReportId", "FilterType");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportFilters");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.ReportTableHeader<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("ReportId");

                    b.Property<Guid>("TableHeaderId");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("UserId", "ReportId", "TableHeaderId");

                    b.HasIndex("ReportId");

                    b.HasIndex("TableHeaderId");

                    b.ToTable("ReportTableHeaders");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.ServiceTimeChecker", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ExecutedLastTime");

                    b.Property<string>("ServiceName")
                        .IsRequired();

                    b.HasKey("ServiceId");

                    b.ToTable("ServiceTimeCheckers");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.TableHeader<System.Guid>", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("Deletable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Order");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("TableHeaders");
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.UserReport<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("ReportId");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("UserId", "ReportId");

                    b.HasIndex("ReportId");

                    b.ToTable("UserReports");
                });

            modelBuilder.Entity("Gear.Domain.SubComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<string>("AuthorJobPosition");

                    b.Property<string>("AuthorName");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<Guid>("MainCommentId");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.HasIndex("MainCommentId");

                    b.ToTable("SubComments");
                });

            modelBuilder.Entity("Gear.Identity.Permissions.Domain.Entities.ModulesForUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasMaxLength(450);

                    b.Property<long>("AllowedPaidForModules");

                    b.HasKey("UserId");

                    b.ToTable("ModulesForUsers");
                });

            modelBuilder.Entity("Gear.Identity.Permissions.Domain.Entities.RoleToPermissions", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(450);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("Modified");

                    b.Property<string>("PermissionsInRole");

                    b.Property<string>("PlatformName");

                    b.HasKey("RoleName");

                    b.ToTable("RolesToPermissions");
                });

            modelBuilder.Entity("Gear.Sstp.Abstractions.Domain.ProductType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("RowOrder");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Gear.Sstp.Abstractions.Domain.ServiceType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("RowOrder");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Gear.Sstp.Abstractions.Domain.SolutionType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("RowOrder");

                    b.HasKey("Id");

                    b.ToTable("SolutionTypes");
                });

            modelBuilder.Entity("Gear.Sstp.Abstractions.Domain.TechnologyType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeletable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("RowOrder");

                    b.HasKey("Id");

                    b.ToTable("TechnologyTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gear.Domain.AppEntities.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Gear.Common.Entities.EntryChange", b =>
                {
                    b.HasOne("Gear.Common.Entities.AuditLog", "AuditLog")
                        .WithMany("Changes")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.AppEntities.ApplicationRole", b =>
                {
                    b.HasOne("Gear.Domain.AppEntities.Platform", "Platform")
                        .WithMany("Roles")
                        .HasForeignKey("PlatformName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.AppEntities.ApplicationUser", b =>
                {
                    b.HasOne("Gear.Domain.HrmEntities.JobPosition", "JobPosition")
                        .WithMany("Users")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.BusinessUnit", b =>
                {
                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "BusinessUnitLead")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("BusinessUnitLeadId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.Department", b =>
                {
                    b.HasOne("Gear.Domain.HrmEntities.BusinessUnit", "BusinessUnit")
                        .WithMany("Department")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "DepartmentLead")
                        .WithMany("Department")
                        .HasForeignKey("DepartmentLeadId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.DepartmentTeam", b =>
                {
                    b.HasOne("Gear.Domain.HrmEntities.Department", "Department")
                        .WithMany("DepartmentTeams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "DepartmentTeamLead")
                        .WithMany("DepartmentTeam")
                        .HasForeignKey("DepartmentTeamLeadId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.JobDepartmentTeam", b =>
                {
                    b.HasOne("Gear.Domain.HrmEntities.DepartmentTeam", "DepartmentTeam")
                        .WithMany("JobDepartmentTeams")
                        .HasForeignKey("DepartmentTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.HrmEntities.JobPosition", "JobPosition")
                        .WithMany("JobDepartmentTeams")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.Recruitment.Candidate", b =>
                {
                    b.HasOne("Gear.Domain.HrmEntities.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId");

                    b.HasOne("Gear.Domain.HrmEntities.Recruitment.RecruitmentStage", "RecruitmentStage")
                        .WithMany("Candidates")
                        .HasForeignKey("RecruitmentStageId");

                    b.OwnsOne("Gear.Domain.ValueObjects.CompoundName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CandidateId");

                            b1.HasKey("CandidateId");

                            b1.ToTable("Candidates");

                            b1.HasOne("Gear.Domain.HrmEntities.Recruitment.Candidate")
                                .WithOne("Name")
                                .HasForeignKey("Gear.Domain.ValueObjects.CompoundName", "CandidateId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Gear.Domain.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("CandidateId");

                            b1.Property<string>("Email");

                            b1.Property<string>("PhoneNumber");

                            b1.HasKey("CandidateId");

                            b1.ToTable("Candidates");

                            b1.HasOne("Gear.Domain.HrmEntities.Recruitment.Candidate")
                                .WithOne("ContactInfo")
                                .HasForeignKey("Gear.Domain.ValueObjects.ContactInfo", "CandidateId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.Recruitment.RecruitmentStage", b =>
                {
                    b.HasOne("Gear.Domain.HrmEntities.Recruitment.RecruitmentPipeline", "Pipeline")
                        .WithMany("RecruitmentStages")
                        .HasForeignKey("PipelineId");
                });

            modelBuilder.Entity("Gear.Domain.HrmEntities.UserDepartmentTeam", b =>
                {
                    b.HasOne("Gear.Domain.HrmEntities.DepartmentTeam", "DepartmentTeam")
                        .WithMany("UserDepartmentTeams")
                        .HasForeignKey("DeparmentTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "User")
                        .WithMany("UserDepartmentTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Activity", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.ActivityList", "ActivityList")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityListId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gear.Domain.PmEntities.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gear.Domain.PmEntities.ChangeRequest", "ChnageRequest")
                        .WithOne("Activity")
                        .HasForeignKey("Gear.Domain.PmEntities.Activity", "ChnageRequestId");

                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gear.Domain.PmEntities.Sprint", "Sprint")
                        .WithMany("Activities")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ActivityAssignee", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Activity", "Activity")
                        .WithMany("Assignees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ActivityList", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithMany("ActivityLists")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.PmEntities.Sprint", "Sprint")
                        .WithMany("ActivityLists")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ChangeRequest", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.CheckItem", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.PmEntities.LoggedTime", "LoggedTime")
                        .WithMany()
                        .HasForeignKey("LoggedTimeId");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.LoggedTime", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Activity", "Activity")
                        .WithMany("LoggedTimes")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.PmEntities.TrackerType", "Tracker")
                        .WithMany("LoggedTimes")
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "User")
                        .WithMany("LoggedTime")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Project", b =>
                {
                    b.HasOne("Gear.Sstp.Abstractions.Domain.ProductType", "ProductTypes")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("Gear.Domain.PmEntities.ProjectGroup", "ProjectGroup")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId");

                    b.HasOne("Gear.Sstp.Abstractions.Domain.ServiceType", "ServiceTypes")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("Gear.Sstp.Abstractions.Domain.SolutionType", "SolutionTypes")
                        .WithMany()
                        .HasForeignKey("SolutionTypeId");

                    b.HasOne("Gear.Sstp.Abstractions.Domain.TechnologyType", "TechnologyTypes")
                        .WithMany()
                        .HasForeignKey("TechnologyTypeId");
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ProjectActivityType", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.ActivityType", "ActivityType")
                        .WithMany("ProjectActivityTypes")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithMany("ProjectActivityTypes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.ProjectMember", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Settings.ProjectInvoice", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithOne("ProjectInvoice")
                        .HasForeignKey("Gear.Domain.PmEntities.Settings.ProjectInvoice", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Settings.ProjectSettings", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithOne("ProjectSettings")
                        .HasForeignKey("Gear.Domain.PmEntities.Settings.ProjectSettings", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Sprint", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.TrackerType", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.ActivityType", "ActivityType")
                        .WithMany("TrackerTypes")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Wiki.Headline", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Project", "Project")
                        .WithMany("WikiHeadlines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.PmEntities.Wiki.Section", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.Wiki.Headline", "Headline")
                        .WithMany("Sections")
                        .HasForeignKey("HeadlineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserActivityStatusFilter<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.ReportEntities.Report<System.Guid>", "Report")
                        .WithMany("ActivityStatusFilters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserDateFilter<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.ReportEntities.Report<System.Guid>", "Report")
                        .WithMany("UserDateFilters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserGuidFilter<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.ReportEntities.Report<System.Guid>", "Report")
                        .WithMany("UserGuidFilters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.FilterEntities.UserProjectStatusFilter<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.ReportEntities.Report<System.Guid>", "Report")
                        .WithMany("UserProjectStatusFilters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.ReportFilter<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.ReportEntities.Report<System.Guid>", "Report")
                        .WithMany("AllowedFiltersByUser")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.ReportTableHeader<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.ReportEntities.Report<System.Guid>", "Report")
                        .WithMany("ReportTableHeaders")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.ReportEntities.TableHeader<System.Guid>", "TableHeader")
                        .WithMany("ReportTableHeaders")
                        .HasForeignKey("TableHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.ReportEntities.UserReport<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.ReportEntities.Report<System.Guid>", "Report")
                        .WithMany("UserReports")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Gear.Domain.SubComment", b =>
                {
                    b.HasOne("Gear.Domain.PmEntities.MainComment", "MainComment")
                        .WithMany("SubComments")
                        .HasForeignKey("MainCommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.AppEntities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.AppEntities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Gear.Domain.AppEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
